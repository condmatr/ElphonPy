import os
import subprocess
from elphonpy.pw import scf_input_gen, nscf_input_gen, to_str
from elphonpy.pseudo import get_pseudos 
import pandas as pd
import numpy as np

def proj_input_gen(prefix, structure, pseudo_dict, param_dict_scf, param_dict_nscf, param_dict_proj, multE=1.0, workdir='./proj', copy_pseudo=False):
    """
    Prepares input file for projwfc calculation, writes input file to workdir. 

    Args:
        prefix (str): prefix of input/output files for scf calculations.
        structure (Pymatgen Structure or IStructure): Input structure.
        pseudo_dict (dict): A dict of the pseudopotentials to use. Default to None.
        param_dict_scf (dict): A dict containing sections for SCF input file ('system','control','electrons','kpoint_grid')
        param_dict_nscf (dict): A dict containing sections for NSCF input file ('system','control','electrons','kpoint_grid')
        param_dict_proj (dict): A dict containing sections for projwfc input file
        kpath_dict (dict): dict generated by elphonpy.bands.get_simple_kpath , or modified to similar standard.
        wannier_plot (bool): Whether to plot Wannier Function representation of bands after wannierization. (default: True)
        multE (float): Multiplier for pseudopotentials ecutwfc, ecutrho if not specified in param_dict.
        workdir (str): target directory for writing SCF input file.
        copy_pseudo (bool): Whether to copy pseudopotentials to current working directory in folder "pseudo".
    """
    
    try:
        os.mkdir(f'{workdir}')
    except OSError as error:
        print(error)

    scf_input_gen(prefix, structure, pseudo_dict, param_dict_scf, multE=multE, workdir=workdir, copy_pseudo=copy_pseudo)
    nscf_input_gen(prefix, structure, pseudo_dict, param_dict_nscf, multE=multE, workdir=workdir, copy_pseudo=False)
    
    pseudopotentials, min_ecutwfc, min_ecutrho = get_pseudos(structure, pseudo_dict, copy_pseudo=copy_pseudo)
    
    with open(f'{workdir}/{prefix}_proj.in', 'w+') as f:
        f.write('&projwfc\n')
        for item in param_dict_proj.items():
            f.write(f'  {item[0]} = {to_str(item[1])}' + '\n')
        f.write('\n')
        f.write('/\n')
    f.close()
    
def scdm_proj_fit(prefix, proj_dir='./proj'):
    from scipy.optimize import curve_fit
    from scipy.special import erfc
    filename = f'{proj_dir}/{prefix}_proj.out'
    subprocess.run("cat" + f" {filename} " + "| grep '==' | awk '{print $5}'" f" > {proj_dir}/e.dat", shell=True, capture_output=True)
    subprocess.run("cat" + f" {filename} " + "| grep '|psi|^2' | awk '{print $3}'" f" > {proj_dir}/p.dat", shell=True, capture_output=True)
    subprocess.run(f"paste {proj_dir}/e.dat {proj_dir}/p.dat > {proj_dir}/tmp.dat", shell=True, capture_output=True)
    subprocess.run(f"sort -k1n {proj_dir}/tmp.dat > {proj_dir}/p_vs_e.dat", shell=True, capture_output=True)
    subprocess.run(f"rm {proj_dir}/e.dat {proj_dir}/p.dat {proj_dir}/tmp.dat", shell = True, capture_output=True)

    proj = pd.read_csv(f'{proj_dir}/p_vs_e.dat', delim_whitespace=True, names=['ev', 'proj'])

    mu = np.arange(np.min(proj['ev'].values), np.max(proj['ev'].values)+10, 1e-4)

    def func(mu, epsilon, sigma):
        return erfc((mu-epsilon)/sigma)/2

    (mu_fit, sigma_opt), cov = curve_fit(func, proj['ev'], proj['proj'], p0=(np.mean(proj['ev']),np.std(proj['ev'])))
    mu_opt = mu_fit - 3*sigma_opt

    plt.scatter(proj['ev'], proj['proj'])
    plt.plot(mu, func(mu, mu_fit, sigma_opt), c='b')
    plt.plot(mu, func(mu, mu_opt, sigma_opt), c='r')
    plt.savefig(f'{proj_dir}/{prefix}_proj.png')

    print(f'mu_fit = {mu_fit}\nmu_opt = {mu_opt}\nsigma_opt = {sigma_opt}')

    with open(f'{proj_dir}/proj_fit.dat', 'w+') as f:
        f.write('mu_fit mu_opt sigma_opt\n')
        f.write(f'{mu_fit} {mu_opt} {sigma_opt}')
    f.close()

